type Query {
  servers(urls: [String!]!): [Server!]!
  executeQuery(url: String!, query: String!): QueryResult!
}

type Mutation {
  checkConnection(url: String!): Boolean!
}

type Server {
  url: String!
  databases(name: String): [Database!]!
}

type Database {
  url: String!
  name: String!
  schemas: [Schema!]!
}

type Schema {
  url: String!
  name: String!
  tables: [Table!]!
  views: [View!]!
  procedures: [Procedure!]!
}

type Table {
  url: String!
  schemaName: String!
  name: String!
  columns: [Column!]!
  indices: [Index!]!
  foreignKeys: [ForeignKey!]!
  constraints: [Constraint!]!
  triggers: [Trigger!]!
}

type View {
  url: String!
  schemaName: String!
  name: String!
  columns: [Column!]!
}

type Procedure {
  schemaName: String!
  name: String!
  returnSet: Boolean!
  returnType: String!
  kind: String!
  isTrigger: Boolean!
  argTypes: [String!]!
  argModes: [String!]!
  argNames: [String!]
}

type Column {
  schemaName: String!
  tableName: String!
  name: String!
  type: String!
  default: String
  isNullable: Boolean!
}

type Index {
  schemaName: String!
  tableName: String!
  columnNames: [String!]!
  name: String!
  isUnique: Boolean!
  isPrimary: Boolean!
}

type ForeignKey {
  schemaName: String!
  tableName: String!
  foreignTableSchemaName: String!
  foreignTableName: String!
  name: String!
  columnNames: [String!]!
  foreignColumnNames: [String!]!
}

type Constraint {
  schemaName: String!
  tableName: String!
  name: String!
  type: ConstraintType!
  columnNames: [String!]!
}

enum ConstraintType {
  PrimaryKey
  Unique
  Check
  Exclude
}

type QueryResult {
  fields: [Field!]!
  rows: [[String]!]!
}

type Field {
  name: String!
  type: String!
}

type Trigger {
  schemaName: String!
  tableName: String!
  triggerSchema: String!
  name: String!
  events: [String!]!
  activation: String!
  condition: String
  definition: String!
}
